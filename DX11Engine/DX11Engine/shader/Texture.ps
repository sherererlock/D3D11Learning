
////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////
#pragma enable_d3d11_debug_symbols

Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 LightColor;
    float3 LightPosition;
    float LightIntensity;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 pos : POSITION;
    float3 normal : NORMAL;
    float4 color : COLOR;
    float2 uv : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

// diffuse = Kd(I/r^2)(max(0, dot(n,l)))
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;

    float3 lightdir = LightPosition - input.pos.xyz;
    float r2 = dot(lightdir,lightdir);
    lightdir = normalize(lightdir);

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.uv);

    float4 diffuse = LightColor * LightIntensity / r2 * saturate(dot(input.normal, lightdir));

    return diffuse * textureColor;
}
